apply from: 'dependencies.gradle'

// Flag which indicates that the build is running in Jenkins:
ext.isJenkins = System.env.BUILD_NUMBER != null

allprojects {
    repositories {
        mavenCentral()

        // Repository containing WildFly with our patch for WFLY-768.
        ivy {
            url 'http://blog.crowbird.com/artifacts'
            layout 'pattern', {
                artifact '[organisation]/[artifact]-[revision](-[classifier])(.[ext])'
            }
        }
    }

    group = 'com.andrewkroh.cisco'
    version = '1.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'

    sourceCompatibility = 1.7

    // Code can compile under 1.6 but MulticastChannel
    // used by Netty will not be available and multicast
    // features will not work.
    targetCompatibility = 1.7

    project.ext.fullProjectName = rootProject.name + '-' + project.name

    jar {
        manifest {
            attributes 'Implementation-Title': project.ext.fullProjectName,
                       'Implementation-Version': version,
                       'Built-By': System.getProperty('user.name'),
                       'Built-Date': new Date(),
                       'Built-JDK': System.getProperty('java.version'),
                       'Built-Gradle': gradle.gradleVersion
        }
    }

    dependencies {
        testCompile libs.mockito,
                    libs.junit,
                    libs.hamcrest
    }

    findbugs {
        ignoreFailures = true
    }

    pmd {
        ignoreFailures = true
    }

    // Override the names of generated archives:
    project.tasks.withType(AbstractArchiveTask).each {
        AbstractArchiveTask task ->
        task.baseName = project.ext.fullProjectName
    }

    // Override the name of Eclipse projects:
    eclipse.project.name = project.ext.fullProjectName

    // Enable HTML reports from FindBugs:
    tasks.withType(FindBugs) {
        reports {
            xml.enabled = rootProject.ext.isJenkins
            html.enabled = !rootProject.ext.isJenkins
        }
    }
}


// --------------------------
// Subproject configurations:
// --------------------------
project(':common') {
    dependencies {
        compile libs.guava,
                libs.jsr305,
                libs.netty_all
    }
}

project(':ip-phone-inventory-manager') {
    dependencies {
        compile libs.cdi_api,
                libs.commons_lang,
                libs.guava,
                libs.inject,
                libs.jsr305,
                libs.slf4j_api
    }
}

project(':multicast-listener') {
    apply plugin: 'application'

    mainClassName = 'com.andrewkroh.cisco.multicast.MulticastListener'

    dependencies {
        compile project(':common'),
                libs.jcommander,
                libs.slf4j_api

        runtime libs.slf4j_simple
    }
}

project(':rtp-streaming') {
    apply plugin: 'application'

    mainClassName = 'com.andrewkroh.cicso.rtp.AudioFileStreamerMain'

    dependencies {
        compile project(':common'),
                libs.commons_io,
                libs.commons_lang,
                libs.jcommander,
                libs.netty_all,
                libs.slf4j_api

        runtime libs.slf4j_simple
    }

    test {
        jvmArgs '-Djava.net.preferIPv4Stack=true'
    }
}

project(':server-directory-service') {
    apply plugin: 'java'

    dependencies {
        compile project(':xml-services-api'),
                project(':server-phone-rest-service'),
                libs.cdi_api,
                libs.guava,
                libs.jsr305,
                libs.inject,
                libs.jaxrs_api,
                libs.slf4j_api
    }
}

project(':server-phone-rest-service') {
    apply plugin: 'java'

    dependencies {
        compile project(':xml-services-api'),
                project(':ip-phone-inventory-manager'),
                project(':rtp-streaming'),
                project(':xml-push-service'),
                libs.cdi_api,
                libs.guava,
                libs.jsr305,
                libs.inject,
                libs.jaxrs_api,
                libs.slf4j_api
    }
}

project(':server-war') {
    apply plugin: 'war'
    apply plugin: 'distribution'

    configurations {
        jboss
    }

    dependencies {
        jboss 'org.jboss:wildfly:8.0.0.CR1@zip'

        compile project(':ip-phone-inventory-manager'),
                project(':server-directory-service'),
                project(':server-phone-rest-service'),
                project(':xml-push-service')

        providedCompile libs.jsr305,
                        libs.cdi_api,
                        libs.slf4j_api,
                        libs.inject,
                        libs.validation_api

        providedRuntime libs.slf4j_simple
    }

    distributions {
        main {
            baseName = 'phone-app-server'
            contents {
                from {
                    configurations.jboss.collect { zipTree(it) }
                }

                into('wildfly-8.0.0.CR1/standalone/deployments') {
                    from war.outputs.files
                }

                from "$projectDir/src/main/scripts"

                from "$projectDir/src/main/properties"

                into('config') {
                    from "$projectDir/src/main/config"
                }
            }
        }
    }
}

project(':xml-push-service') {
    apply plugin: 'java'

    dependencies {
        compile project(':common'),
                project(':xml-services-api'),
                project(':ip-phone-inventory-manager'),
                libs.cdi_api,
                libs.commons_codec,
                libs.commons_lang,
                libs.guava,
                libs.inject,
                libs.java_deep_cloning,
                libs.jaxrs_api,
                libs.jsr305,
                libs.netty_all,
                libs.slf4j_api,
                libs.validation_api

        runtime libs.slf4j_simple
    }
}

project(':xml-services-api') {
    apply plugin: 'java'

    // Cisco version from the XSD:
    version = '3.3.4'

    configurations {
        xjc
    }

    dependencies {
        compile libs.guava,
                libs.jsr305

        xjc libs.jaxb_impl,
            libs.jaxb_xjc
    }
 
    sourceSets {
        generated {
            java.srcDirs = ["$buildDir/generated-src/jaxb"]
        }
    }

    task xjc {
        ext.package = 'com.cisco.xmlservices.generated'
        ext.outputDir = sourceSets.generated.java.srcDirs.iterator().next()
        outputs.dir(ext.outputDir)

        doLast {
            ant.taskdef(name: 'xjc', 
                        classname: 'com.sun.tools.xjc.XJCTask',
                        classpath: configurations.xjc.asPath)

            ext.outputDir.mkdirs()
            ant.xjc(destdir: ext.outputDir, package: ext.package,
                    removeOldOutput: 'yes') {
                schema(dir: 'src/main/resources/schema') {
                    include (name: 'CiscoIPPhone.xsd')
                }
                arg(value: '-verbose')
            }
        }
    }
 
    compileJava.dependsOn xjc
    compileJava.source xjc.outputs.files, sourceSets.main.java
}
